# *********************************************************** S3 Bucket ***********************************************************
Resources:
  Bucket:
    Type: AWS::S3::Bucket
    # DependsOn: BucketInvokePermission
    Properties:
      BucketName: !Sub ${self:service}-${self:provider.stage}
  #     NotificationConfiguration:
  #       LambdaConfigurations:
  #         - Event: s3:ObjectCreated:*
  #           Filter:
  #             S3Key:
  #               Rules:
  #                 - Name: 'prefix'
  #                   Value: 'receipts/'
  #                 - Name: 'suffix'
  #                   Value: '.csv'
  #           Function: !Sub arn:aws:lambda:${self:provider.region}:${AWS::AccountId}:function:${self:service}-${self:provider.stage}-example
  #         - Event: s3:ObjectCreated:*
  #           Filter:
  #             S3Key:
  #               Rules:
  #                 - Name: 'prefix'
  #                   Value: 'vendors/'
  #                 - Name: 'suffix'
  #                   Value: '.csv'
  #           Function: !Sub arn:aws:lambda:${self:provider.region}:${AWS::AccountId}:function:${self:service}-${self:provider.stage}-example
  # BucketInvokePermission:
  #   Type: AWS::Lambda::Permission
  #   Properties:
  #     FunctionName: !Sub arn:aws:lambda:${self:provider.region}:${AWS::AccountId}:function:${self:service}-${self:provider.stage}-example
  #     Action: lambda:InvokeFunction
  #     Principal: s3.amazonaws.com
  #     SourceArn: !Sub arn:aws:s3:::${self:service}-${self:provider.stage}

# *********************************************************** DynamoDB ***********************************************************
  CustomerMappingTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: ${self:service}-${self:provider.stage}-customer-mapping
      AttributeDefinitions:
        - AttributeName: customer_id
          AttributeType: S
        - AttributeName: other_customer_id
          AttributeType: S
      KeySchema:
        - AttributeName: customer_id
          KeyType: HASH
      GlobalSecondaryIndexes:
        - IndexName: other_customer_id-index
          KeySchema:
            - AttributeName: other_customer_id
              KeyType: HASH
          Projection:
            ProjectionType: ALL
      BillingMode: PAY_PER_REQUEST
      SSESpecification:
        SSEEnabled: true

# *********************************************************** RDS ***********************************************************
  # MyDBSubnetGroup:
  #   Type: AWS::RDS::DBSubnetGroup
  #   Properties:
  #     DBSubnetGroupDescription: My DB Subnet Group
  #     SubnetIds: 
  #       - subnet-0715699ccc424cf71
  #       - subnet-0dff553a0075a603f
  #       - subnet-0267794ff09f459a3

  # MyDBInstance:
  #   Type: AWS::RDS::DBInstance
  #   DependsOn: MyDBSubnetGroup
  #   Properties:
  #     DBSubnetGroupName: !Ref MyDBSubnetGroup
  #     AllocatedStorage: 50
  #     DBInstanceClass: db.t3.large
  #     Engine: mysql
  #     EngineVersion: 8.0.35
  #     MasterUsername: admin
  #     MasterUserPassword: password
  #     DBName: ${self:custom.rdsName}${self:provider.stage}
  #     VPCSecurityGroups:
  #       - !Ref MyDBSecurityGroup
  # MyDBSecurityGroup:
  #   Type: AWS::EC2::SecurityGroup
  #   Properties:
  #     GroupDescription: Security group for RDS DB Instance
  #     VpcId: vpc-0233576269adc49e1
  #     SecurityGroupIngress:
  #       - IpProtocol: tcp
  #         FromPort: 3306
  #         ToPort: 3306
  #         CidrIp: 0.0.0.0/0
